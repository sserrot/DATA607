}
for (tag in champ$tags) {
roles <- tag %>% str_split(",") %>% str_trim()
primary_role <- primary_role[1]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",") %>% str_trim()
primary_role <- primary_role[[1]]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",") %>% str_trim()
primary_role <- unlist(primary_role)
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",") %>% str_trim()
primary_role <- roles[[1]]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",") %>% str_trim()
primary_role <- roles[1]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",") %>% str_trim()
primary_role <- roles
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- unlist(roles)
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[1]][2]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[1]][2]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[1]][2]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[1]][2]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[2]][2]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[length(roles)]]
print(primary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[length(roles)]]
print(roles)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[length(roles)]]
print(length(roles))
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[length(roles)]]
print(length(roles[[1]]))
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[length(roles[[1]])]]
print(secondary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[length(roles[[1]])]]
print(length(roles[[1]]))
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[1]]
print(length(roles[[1]]))
}
test <- champ$tags[[1]]
test
test %>% str_split(",")
test <- test %>% str_split(",")
test[1]
test[[1]]
test[[1]][1]
test[[1]][2]
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1]
secondary_role <- roles[[1]][length(roles[[1]])] #
print(secondary_role)
}
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1] %>% trimws()
secondary_role <- roles[[1]][length(roles[[1]])] %>% trimws()
print(secondary_role)
}
?add_column
secondary_role
primary_role <- c()
secondary_role <- c()
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- roles[[1]][1] %>% trimws()
secondary_role <- roles[[1]][length(roles[[1]])] %>% trimws()
}
champ <- champ %>% add_column(primary_role = primary_role, secondary_role = secondary_role)
head(champ)
primary_role <- c()
secondary_role <- c()
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- c(primary_role, roles[[1]][1] %>% trimws())
secondary_role <- c(secondary_role, roles[[1]][length(roles[[1]])] %>% trimws())
}
champ <- champ %>% add_column(primary_role = primary_role, secondary_role = secondary_role)
champ
champ[1:5,]
champ[,1:5]
champ[,1:6]
champ <- champ[,1:6]
primary_role <- c()
secondary_role <- c()
for (tag in champ$tags) {
roles <- tag %>% str_split(",")
primary_role <- c(primary_role, roles[[1]][1] %>% trimws())
secondary_role <- c(secondary_role, roles[[1]][length(roles[[1]])] %>% trimws())
}
champ <- champ %>% add_column(primary_role = primary_role, secondary_role = secondary_role)
champ
champ <- champ %>% mutate(strength = attack + defense)
champ
champ %>% group_by(primary_role) %>% max(strength)
champ %>% group_by(primary_role) %>% max(champ$strength)
champ %>% group_by(primary_role) %>% summarize(max(champ$strength))
primary_role <- c()
champ %>% group_by(primary_role) %>% summarize(min(champ$strength))
?summarize()
champ %>% group_by(primary_role) %>% summarize(max = max(champ$strength), min = min(strength), mean = mean(strength), count = n())
champ %>% group_by(primary_role) %>% summarize(max = max(defense), min = min(defense), mean = mean(defense), count = n())
champ %>% group_by(primary_role) %>% summarize(max = max(attack), min = min(attack), mean = mean(attack), count = n())
champ %>% ggplot(aes(x=difficulty, y=strength)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength)) + geom_point() + geom_text(label=row.names(champ))
champ %>% ggplot(aes(x=difficulty, y=strength)) + geom_point() + geom_text(label=name)
row.names(champ) <- champ$name
row.names(champ)
champ %>% ggplot(aes(x=difficulty, y=strength)) + geom_point() + geom_text(label=row.names)
champ
head(champ)
champ[,2:length(champ)]
champ %>% ggplot(aes(x=difficulty, y=strength)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% ggplot(aes(x=strength, y=difficulty, color = primary_role)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% filter(primary_role = "Assassin") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% filter(primary_role == "Assassin") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% filter(primary_role == "Mage") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% filter(primary_role == "Fighter") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point() +  geom_smooth(method=lm)
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% filter(primary_role == "Fighter") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~primary_role)
champ %>% filter(primary_role == "Fighter") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point() + facet_wrap(~primary_role)
champ %>% filter(primary_role == "Fighter") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_BAR() + geom_smooth(method=lm) + facet_wrap(~primary_role)
champ %>% filter(primary_role == "Fighter") %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_bar() + geom_smooth(method=lm) + facet_wrap(~primary_role)
```{r}
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~primary_role)
champ %>% ggplot(aes(x=difficulty, y=strength)) + geom_point() + geom_smooth(method=lm)
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point()
champ %>% ggplot(aes(x=difficulty, y=strength, color = primary_role)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~primary_role)
champ %>% group_by(primary_role)
champ %>% group_by(primary_role) %>% summmarize(max = max(strength))
champ %>% group_by(primary_role) %>% summarize(max = max(strength))
champ %>% group_by(primary_role) %>% summarize(max = max(strength), min = min(strength), mean = mean(strength), stdev = sd(strength), count = n())
input_csv <- "https://raw.githubusercontent.com/sserrot/DATA607/main/Project%202/child_mortality_rates/API_SH.DYN.MORT_DS2_en_csv_v2_3012069.csv"
child_mort <- read.csv(input_csv)
child_mort <- read.csv(input_csv)
child_mort <- read.csv(input_csv)
child_mort <- read.csv(input_csv)
input_csv <- "https://raw.githubusercontent.com/sserrot/DATA607/main/Project%202/child_mortality_rates/API_SH.DYN.MORT_DS2_en_csv_v2_3012069.csv"
child_mort <- read.csv(input_csv)
?read.csv
child_mort <- read.csv(input_csv, header = TRUE)
child_mort <- read.delim(input_csv)
child_mort
child_mort[1]
row.names(child_mort)
child_mort <- read.delim(input_csv)
child_mort
child_mort <- read.csv(input_csv)
child_mort
colnames(child_mort)
1970:2019
child_mort <- child_mort %>% rename(country_name = "ï..Country.Name")
colnames(child_mort)
child_mort$X1960
child_mort <- read.csv(input_csv, check.names = FALSE)
colnames(child_mort)
child_mort <- child_mort %>% rename(country_name = "ï»¿Country Name", country_code = "Country.Code")
?pivot_longer()
?pivot_longer()
child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to "Year")
child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to = "year", values_to =  "child_mortality")
child_mort <- child_mort %>% rename(country_name = "ï»¿Country Name", country_code = "Country Code")
child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to = "year", values_to =  "child_mortality")
child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to = "year")
child_mort %>% filter(country_code == "USA")
child_mort <- child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to = "year", values_to =  "child_mortality")
head(child_mort)
child_mort %>% filter(country_code == "USA")
child_mort %>% max(Year)
child_mort %>% max(year)
child_mort$year
child_mort %>% max(child_mort$year)
class(child_mort$year)
input_csv <- "https://raw.githubusercontent.com/sserrot/DATA607/main/Project%202/child_mortality_rates/API_SH.DYN.MORT_DS2_en_csv_v2_3012069.csv"
child_mort <- read.csv(input_csv, check.names = FALSE)
child_mort <- read.csv(input_csv, check.names = FALSE)
colnames(child_mort)
child_mort <- child_mort %>% rename(country_name = "ï»¿Country Name", country_code = "Country Code")
head(child_mort)
child_mort <- child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to = "year", names_transform = list(year = as.integer) values_to =  "child_mortality")
child_mort <- child_mort %>% pivot_longer(cols = !c("country_name","country_code"),names_to = "year", names_transform = list(year = as.integer), values_to =  "child_mortality")
class(child_mort$year)
head(child_mort)
child_mort %>% filter(country_code == "USA")
child_mort %>% max(child_mort$year)
max(child_mort$year)
child_mort %>% sort(asc)
child_mort %>% sort(year)
child_mort %>% sort(child_mort$child_mortality)
child_mort %>% group_by(year) %>% sort(child_mort$child_mortality)
child_mort %>% group_by(year) %>% order_by(mortality_rate)
child_mort %>% group_by(year) %>% arrange(mortality_rate)
colnames(child_mort)
child_mort %>% group_by(year) %>% arrange(child_mortality)
child_mort %>% filter(year == 2019) %>% arrange(child_mortality)
child_mort %>% filter(year == 2019) %>% arrange(child_mortality, desc()) %>%
child_mort %>% filter(year == 2019) %>% arrange(child_mortality, desc())
child_mort %>% filter(year == 2019) %>% arrange(child_mortality, desc())
?arrange()
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality))
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:4)
Let's filter the data for 2019 and slice the first 5 countries with the highest child mortality
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:5)
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:5)
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:5)
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:10)
child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:10) %>% select(country_name)
child_mort %>% filter(country_name in bottom_ten)
child_mort %>% filter(country_name %in% bottom_ten)
bottom_ten <- child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:10) %>% select(country_name)
child_mort %>% filter(country_name %in% bottom_ten)
bottom_ten
child_mort$country_name
bottom_ten_code <- child_mort %>% filter(year == 2019) %>% arrange(desc(child_mortality)) %>% slice(1:10) %>% select(country_code)
child_mort %>% filter(country_code %in% bottom_ten)
child_mort %>% filter(country_code %in% bottom_ten_code)
bottom_ten_code
child_mort[country_code == "NGA"]
child_mort
child_mort[child_mort$country_code == "NGA"]
child_mort$country_code == "NGA"
child_mort
child_mort$country_code == "ABW"
child_mort[child_mort$country_code == "ABW",]
child_mort[child_mort$country_code %in% bottom_ten_code,]
bottom_ten_code
"NGA" %in% bottom_ten_code
"NGA " %in% bottom_ten_code
"NGA         " %in% bottom_ten_code
"NGA" %in% trimws(bottom_ten_code)
test <- "NGA"
test %>% in bottom_ten_code
test  %in% bottom_ten_code
test_code <- "NGA"
bottom_ten_code$country_code
child_mort_bottom_ten <- child_mort[child_mort$country_code %in% bottom_ten_code$country_code,]
child_mort_bottom_ten
child_mort_bottom_ten %>% ggplot(aes(x=year,y=child_mortality)) + geom_point()
child_mort_bottom_ten %>% ggplot(aes(x=year,y=child_mortality, fill = country_code)) + geom_point()
child_mort_bottom_ten %>% ggplot(aes(x=year,y=child_mortality, color = country_code)) + geom_point()
child_mort_bottom_ten %>% ggplot(aes(x=year,y=child_mortality, color = country_code)) + geom_point() + facet_wrap(~country_code)
child_mort_bottom_ten %>% ggplot(aes(x=year,y=child_mortality, color = country_name)) + geom_point() + facet_wrap(~country_name)
child_mort_bottom_ten %>% ggplot(aes(x=year,y=child_mortality, color = country_name)) + geom_point()
child_mort %>% filter(country_code == "UK")
child_mort %>% filter(country_code == "USA")
child_mort %>% filter(country_name == "United Kingdom")
child_mort %>% filter(country_name %in% g_seven) %>% ggplot(aes(x=year,y=child_mortality, color = country_name)) + geom_point()
g_seven <- c("Canada", "France", "Germany", "Italy", "Japan","United Kingdom","United States")
child_mort %>% filter(country_name %in% g_seven) %>% ggplot(aes(x=year,y=child_mortality, color = country_name)) + geom_point()
child_mort_bottom_ten %>% group_by(country_name) %>% summarize(min(year))
child_mort_bottom_ten %>% group_by(country_name) %>% summarize(min(year))
child_mort_bottom_ten[country_name="Somalia"]
child_mort_bottom_ten[country_name=="Somalia",]
child_mort_bottom_ten[child_mort_bottom_ten$country_name=="Somalia",]
child_mort_bottom_ten[child_mort_bottom_ten$country_name=="South Sudan",]
child_mort_bottom_ten %>% drop_na() %>% group_by(country_name) %>% summarize(min(year))
child_mort_bottom_ten %>% drop_na() %>% group_by(country_name) %>% summarize(min_year = min(year), mortality = child_mortality)
child_mort_bottom_ten %>% drop_na() %>% group_by(country_name) %>% summarize(min_year = min(year), mortality = max(child_mortality))
child_mort_bottom_ten_earliest %>% drop_na() %>% group_by(country_name) %>% summarize(min_year = min(year))
child_mort_bottom_ten %>% drop_na() %>% group_by(country_name) %>% summarize(min_year = min(year))
earliest_year <- child_mort_bottom_ten %>% drop_na() %>% group_by(country_name) %>% summarize(min_year = min(year))
child_mort %>% filter(country_name %in% g_seven) %>% ggplot(aes(x=year,y=child_mortality, color = country_name)) + geom_point()
input_csv <- "https://raw.githubusercontent.com/sserrot/DATA607/main/Project%202/tuition_assistance/Tuition_Assistance_Program__TAP__Fall_Headcount_By_College__Sector_Group__and_Level_of_Study___Beginning_2000.csv"
TAP  <- read.csv(input_csv, check.names = FALSE)
colnames(TAP)
TAP <- TAP %>% rename(academic_year = "Academic Year", tap_college_code = "TAP College Code", fed_school_code = "Federal School Code", level = Level, study_level = "TAP Level of Study", sector_type = "Sector Type", sector_group = "TAP Sector Group", headcount = "TAP Fall Headcount")
colnames(TAP)
head(TAP)
unique(TAP$academic_year)
TAP %>% group_by(academic_year) %>% summarize(largest_headcount_by_year = max(headcount))
TAP %>% group_by(academic_year) %>% summarize(largest_headcount_by_year = max(headcount)) %>% arrange(desc(max(headcount)))
TAP %>% group_by(academic_year) %>% summarize(largest_headcount_by_year = max(headcount)) %>% arrange(desc(largest_headcount_by_year))
TAP <- TAP %>% rename(tap_college_name = "TAP College Name")
TAP %>% group_by(academic_year, tap_college_name) %>% summarize(largest_headcount_by_year = max(headcount)) %>% arrange(desc(largest_headcount_by_year))
TAP %>% group_by(academic_year, tap_college_name, sector_type) %>% summarize(largest_headcount_by_year = max(headcount)) %>% arrange(desc(largest_headcount_by_year))
TAP %>% ggplot(aes(x=academic_year, y=headcount, color=tap_college_name)) + geom_point()
TAP %>% ggplot(aes(x=academic_year, y=headcount, color=tap_college_name)) + geom_point()
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point()
TAP %>% group_by(tap_college_name)
TAP %>% group_by(tap_college_name) %>% summarize(n())
unique(TAP$tap_college_name)
count(unique(TAP$tap_college_name))
length(unique(TAP$tap_college_name))
TAP %>% group_by(sector_group) %>% summarise(count = n())
TAP %>% group_by(tap_college_name, sector_group) %>% summarise(count = n())
TAP %>% group_by(sector_group,tap_college_name) %>% summarise(count = n())
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point()
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point() + facet_wrap(~sector_group)
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point() + facet_wrap(~sector_type)
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point() + facet_wrap(~sector_group)
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_line() + facet_wrap(~sector_group)
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_bar() + facet_wrap(~sector_group)
TAP %>% ggplot(aes(y=headcount)) + geom_bar() + facet_wrap(~sector_group)
TAP %>% ggplot(aes(y=headcount)) + geom_bar()
TAP %>% ggplot(aes(x=headcount)) + geom_bar()
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point() + facet_wrap(~sector_group)
TAP %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point() + facet_wrap(~sector_type)
TAP %>% group_by(academic_year, sector_group) %>% summarize(sum(headcount))
TAP %>% group_by(academic_year, sector_group) %>% summarize(headcount = sum(headcount)) %>% ggplot(aes(x=academic_year, y=headcount)) + geom_point() + facet_wrap(~sector_group)
TAP %>% group_by(academic_year, sector_group) %>% summarize(headcount = sum(headcount)) %>% ggplot(aes(x=academic_year, y=headcount, color = sector_group)) + geom_point()
TAP %>% group_by(academic_year, sector_type) %>% summarize(headcount = sum(headcount)) %>% ggplot(aes(x=academic_year, y=headcount, color = sector_type)) + geom_point()
TAP %>% group_by(academic_year, sector_group) %>% summarize(headcount = sum(headcount)) %>% ggplot(aes(x=academic_year, y=headcount, color = sector_group)) + geom_point()
TAP %>% group_by(academic_year, sector_group) %>% summarize(headcount = sum(headcount)) %>% ggplot(aes(x=academic_year, y=headcount, color = sector_group)) + geom_point() + facet_wrap(~sector_group)
TAP %>% group_by(academic_year, sector_type) %>% summarize(headcount = sum(headcount)) %>% ggplot(aes(x=academic_year, y=headcount, color = sector_type)) + geom_point()
TAP %>% group_by(academic_year) %>% summarize(total = sum(headcount))
TAP %>% group_by(academic_year) %>% summarize(total = sum(headcount)) %>% left_join(TAP, by = academic_year)
?left_join
TAP %>% group_by(academic_year) %>% summarize(total = sum(headcount)) %>% left_join(TAP)
TAP_academic_year <- TAP %>% group_by(academic_year) %>% summarize(total = sum(headcount))
TAP_sector_group %>% left_join(TAP_academic_year)
TAP_sector_group <- TAP %>% group_by(academic_year, sector_group) %>% summarize(headcount = sum(headcount))
TAP_sector_type <- TAP %>% group_by(academic_year, sector_type) %>% summarize(headcount = sum(headcount))
TAP_sector_group %>% left_join(TAP_academic_year)
TAP_sector_group <- TAP_sector_group %>% left_join(TAP_academic_year)
TAP_sector_type <- TAP_sector_type %>% left_join(TAP_academic_year)
TAP_sector_group %>% mutate(percent_students = headcount / total)
TAP_sector_group %>% mutate(percent_students = headcount / total * 100)
TAP_sector_group %>% mutate(percent_students = format(headcount / total * 100, digits = 2))
TAP_sector_group %>% mutate(percent_students = format(headcount / total * 100, digits = 3))
TAP_sector_group %>% ggplot(aes(fill=sector_group,y=headcount,x=academic_year)) + geom_bar(position="dodge", stat="identity")
TAP_sector_group %>% ggplot(aes(fill=sector_group,y=headcount,x=academic_year)) + geom_bar(position="stack", stat="identity")
TAP_sector_group %>% ggplot(aes(fill=sector_group,y=headcount,x=academic_year)) + geom_bar(position="fill", stat="identity")
TAP_sector_type[max(percent_students),]
TAP_sector_type[max(TAP_sector_type$percent_students),]
TAP_sector_type
TAP_sector_type <-TAP_sector_type %>% mutate(percent_students = format(headcount / total * 100, digits = 3))
TAP_sector_type[max(TAP_sector_type$percent_students),]
TAP_sector_type
max(TAP_sector_type$percent_students)
TAP_sector_type[,max(TAP_sector_type$percent_students)]
TAP_sector_type %>% filter(percent_students == max(TAP_sector_type$percent_students))
TAP_sector_group %>% filter(percent_students == max(TAP_sector_group$percent_students))
TAP_sector_group <- TAP_sector_group %>% left_join(TAP_academic_year)
TAP_sector_group <- TAP_sector_group %>% mutate(percent_students = format(headcount / total * 100, digits = 3))
TAP_sector_group %>% filter(percent_students == max(TAP_sector_group$percent_students))
TAP_sector_group %>% ggplot(aes(fill=sector_group,y=headcount,x=academic_year)) + geom_bar(position="fill", stat="identity")
TAP_sector_type %>% ggplot(aes(fill=sector_type,y=headcount,x=academic_year)) + geom_bar(position="fill", stat="identity")
library(tidyverse)
library(readxl)
library(tidyjson)
library(rvest)
# get json from webpage with rvest read_html
page <- read_html('https://ddragon.leagueoflegends.com/cdn/11.19.1/data/en_US/champion.json')
# parse the html with rvest, return just the contents of the <body> element
json <- page %>% html_elements("body") %>% html_text()
# check out the structure
json %>% gather_object %>% json_types
# get only the 'data' object from the json and spread_all into a
# json table, then convert back to regular dataframe
champions <- json %>%
enter_object(data) %>%
gather_object %>%
spread_all %>%
as_data_frame.tbl_json
df <- champions %>%
select(c('name','stats.hp','stats.mp','stats.movespeed','stats.armor'))
ggplot(df) +
aes(x = stats.hp) +
geom_histogram(binwidth = 10, color = "#112446", fill="#ffffff") +
theme_minimal()
ggplot(df) +
aes(x = stats.mp) +
geom_histogram(binwidth=50, color = "#112446", fill="#ffffff") +
theme_minimal()
ggplot(df) +
aes(x = stats.armor) +
geom_histogram(binwidth=2, color = "#112446", fill="#ffffff") +
theme_minimal()
ggplot(df) +
aes(stats.hp, stats.armor) +
geom_point() +
theme_minimal()
?textreadr
??textreadr
?tidyverse
install.packages('textreadr')
read_html("https://github.com/sserrot/DATA607/blob/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.html")
getwd()
cd ..
setwd("C:\\Users\\Santiago Henrique\\Documents\\Data Science\\Data Acquisition and Management\\DATA607\\Homework\\Working with XML and JSON in R"
)
ls
read_html("books.html")
textreadr::read_html("books.html")
test <- textreadr::read_html("books.html")
test2 <- rvest::read_html("books.html")
test2
test2[1]
test[1]
test2 %>% html_elements("th")
test2 %>% html_elements("tr")
test2 %>% html_elements("th")
test2 %>% html_elements("tr") %>% html_table()
test2 %>% html_elements("table") %>% html_table()
test2 %>% html_elements("table")
test2 <- rvest::read_html("https://github.com/sserrot/DATA607/blob/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.html")
test2 %>% html_elements("table") %>% html_table()
?curl_download
test2 <- rvest::read_html("https://htmlpreview.github.io/?https://github.com/sserrot/DATA607/blob/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.html")
test2 %>% html_elements("table") %>% html_table()
test2
test2 <- rvest::read_html("https://raw.githubusercontent.com/sserrot/DATA607/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.html")
test2 %>% html_elements("table") %>% html_table()
test2 <- rvest::read_html("https://raw.githubusercontent.com/sserrot/DATA607/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.xml")
test2
test2 <- xm("https://raw.githubusercontent.com/sserrot/DATA607/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.xml")
install.packages("XML")
library(XML)
xmlToDataFrame("https://raw.githubusercontent.com/sserrot/DATA607/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.xml")
xmlToDataFrame("books.xml")
xmlParse("books.xml")
test <- xmlParse("books.xml")
test <- xmlToList(test)
test
knitr::opts_chunk$set(echo = TRUE)
json_books_url <- "https://raw.githubusercontent.com/sserrot/DATA607/main/Homework/Working%20with%20XML%20and%20JSON%20in%20R/books.json"
fromJSON(json_books_url)
test <- fromJSON(json_books_url)
test
class(test)
unlist(test)
test$library
tibble(test$library)
